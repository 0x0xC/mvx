type Game @entity {
  id: ID! #name of the game ex: Dice
  houseEdge: BigDecimal!
  betCount: Int!
}

type Distribution @entity {
  id: ID!

  receiver: String! # referral or referrer
  amount: BigInt!
  token: String!
  typeId: BigInt!

  transactionHash: String!
  blockNumber: BigInt!
  timestamp: BigInt!
}

type TokenStat @entity {
  id: ID! #token address-period-periodIndex
  volume: BigDecimal!
  fiatVolume: BigDecimal!
  betCount: Int!
  tokenSymbol: String
  tokenName: String
  tokenDecimals: BigInt
  period: Period!
  periodIndex: BigInt!
}

type TokenGlobalStat @entity {
  id: ID! #token address
  volume: BigDecimal!
  fiatVolume: BigDecimal!
  betCount: Int!
  tokenSymbol: String
  tokenName: String
  tokenDecimals: BigInt
}

type GameResult @entity {
  id: ID! #game address - gameId
  betTx: Bytes
  resolveTx: Bytes
  gameId: BigInt
  gameType: String
  referralId: BigInt
  player: Bytes
  timestamp: Int
  win: Boolean
  multiplier: BigDecimal
  result: BigInt
  betOn: [Int!]
  tokenSymbol: String
  betAsset: Bytes
  fiatAmount: BigDecimal # bet amount in fiat
  payoutFiatAmount: BigDecimal
  betAmount: BigDecimal # bet amount in native token
  payoutAmount: BigDecimal
  resolved: Boolean
}

type PlayerStat @entity {
  id: ID! #address-period-periodIndex
  fiatVolume: BigDecimal!
  betCount: Int!
  wins: Int!
  losses: Int!
  profit: BigDecimal!
  houseProfitnLoss: BigDecimal! # only if they have a referrer
  period: Period!
  periodIndex: BigInt!
}

type PlayerGlobalStat @entity {
  id: ID! #address
  fiatVolume: BigDecimal!
  betCount: Int!
  wins: Int!
  losses: Int!
  profit: BigDecimal!
  houseProfitnLoss: BigDecimal!
}


type ReferralCode @entity {
  id: ID! # id: string
  owner: String!
  code: String!
}

type Code @entity {
  id: ID! # code string
  codeId: Int!
  owner: String!
}

type ReferralProfile @entity {
  id: ID! # address
  referrer: String
  referrerCode: String
  referredAt: BigInt
  baseCommission: BigInt
  fiatVolume: BigDecimal
  locked: Boolean
  first: Boolean #first Game
  timestamp: BigInt
}

type ReferrerGlobalStat @entity {
  id: ID! #address
  fiatVolume: BigDecimal!
  houseProfitnLoss: BigDecimal!
  referees: Int!
  betCount: Int!

  # codeCreated: Int!
}
type ReferrerStat @entity { #aggregate the stats of every referral code for the time period
  id: ID! #address-period-periodIndex
  houseProfitnLoss: BigDecimal! # Use RefererStat for an approximation for the revenue distribution
  fiatVolume: BigDecimal!
  activeReferees: Int!
  newReferees: Int!
  betCount: Int!
  period: Period!
  periodIndex: BigInt!
}

type ReferralCodeGlobalStat @entity {
  id: ID! # codeId
  owner: String!
  referees: Int! # Number of referees for this specific code
  fiatVolume: BigDecimal!
  betCount: Int!
  houseProfitnLoss: BigDecimal! # Pnl in favor of the house generated by this specific code. Use RefererStat for revenue distribution
  referralCode: String!
}

type ReferralCodeStat @entity {
  id: ID! # codeId-period-periodIndex
  owner: String! # Owner address
  activeReferees: Int! # Number of active referees for this specific code
  newReferees: Int! # Number of new referees during the time period
  fiatVolume: BigDecimal!
  betCount: Int!
  houseProfitnLoss: BigDecimal! # PnL in favor of the house generated by this specific code during the time period
  period: Period!
  periodIndex: BigInt!
  referralCode: String!
}


enum Period {
  # daily
  weekly
  # biweekly
  monthly
}